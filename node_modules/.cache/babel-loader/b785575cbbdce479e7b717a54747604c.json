{"ast":null,"code":"var _jsxFileName = \"/home/pal/code/herokuMaat/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { MdLayersClear } from 'react-icons/md';\nimport { IconContext } from 'react-icons';\nimport { Dropdown } from 'react-bootstrap';\nimport Map3 from './components/Map3';\nimport CountriesDropdown from './components/Dropdown';\nimport CountryDetails from './components/CountryDetails';\nimport Filter from './components/Filter';\nimport { countriesService } from './services/countriesService';\nimport { relService } from './services/relService';\nimport { currencyService } from './services/currencyService';\nimport { getBlocsService } from './services/blocService';\nimport LoginForm from './components/LoginForm';\nimport SelectedFlags from './components/SelectedFlags';\nimport SaveBloc from './components/SaveBloc';\nimport Footer from './components/Footer';\nimport './styles/MapBottomButtons.css';\nimport './styles/SaveBloc.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getNewColor = () => {\n  const R = Math.round(Math.random() * 255).toString(16).padStart(2, '0');\n  const G = Math.round(Math.random() * 255).toString(16).padStart(2, '0');\n  const B = Math.round(Math.random() * 255).toString(16).padStart(2, '0');\n  return `#${R}${G}${B}`;\n};\nfunction App() {\n  _s();\n  const [loggingIn, setLoggingIn] = useState(true);\n  const [selected, setSelected] = useState([]);\n  const [mapColor, setMapColor] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [showDetail, setShowDetail] = useState(null);\n  const [user, setUser] = useState(null);\n  const [blocs, setBlocs] = useState([]);\n  const [religions, setReligions] = useState([]);\n  const [background, setBackground] = useState(\"yellow\");\n  // const [currencies, setCurrencies] = useState([])\n\n  useEffect(() => {\n    const fetchCountries = async () => {\n      await countriesService().then(res => {\n        setCountries(res);\n        //console.log(\"countries in fetching app\",countries)\n      });\n    };\n\n    fetchCountries();\n  }, []);\n  useEffect(() => {\n    const fetchReligions = async () => {\n      await relService().then(res => {\n        setReligions(res);\n        // console.log(\"REL IN FETCH \",religions)\n      });\n    };\n\n    fetchReligions();\n  }, []);\n\n  /*\n    useEffect(() => {\n    const fetchCurrency = async () => {\n      await currencyService().then(res => {\n        setCurrencies(res)\n        // console.log(\"REL IN FETCH \",religions)\n      })\n    }\n    fetchCurrency()\n  }, [])\n  */\n  const updateBlocList = () => {\n    if (user) {\n      const fetchBlocs = async () => {\n        await getBlocsService(`bearer ${user.token}`).then(res => {\n          //console.log(\"got blocs: \",res)\n          setBlocs(res);\n        });\n      };\n      fetchBlocs();\n    }\n  };\n  const selectOne = id => {\n    //console.log(\"selectOne called for \",id)\n    if (selected.includes(id)) {\n      //give it a new color\n      setMapColor([...mapColor.filter(c => c.id !== id), {\n        id: id,\n        color: getNewColor()\n      }]);\n    } else {\n      setSelected([...selected, id]);\n      setMapColor([...mapColor, {\n        id: id,\n        color: getNewColor()\n      }]);\n    }\n    setShowDetail(id);\n  };\n  const deselectOne = id => {\n    if (showDetail === id) {\n      setShowDetail(null);\n    }\n    setSelected(selected.filter(c => c !== id));\n    setMapColor(mapColor.filter(c => c.id !== id));\n  };\n  const deselectKeepDetails = id => {\n    setSelected(selected.filter(c => c !== id));\n    setMapColor(mapColor.filter(c => c.id !== id));\n  };\n  const selectMany = ids => {\n    let ourColor = getNewColor();\n    let newColors = ids.map(c => {\n      return {\n        id: c,\n        color: ourColor\n      };\n    });\n    setSelected([...selected.filter(s => !ids.includes(s)), ...ids]);\n    setMapColor([...mapColor.filter(c => !ids.includes(c.id)), ...newColors]);\n    /* old implementation that preserves existing colors\n    let newColors = []\n    let newSelections = []\n    ids.forEach(country=>{\n      if(!selected.includes(country)){\n        newSelections.push(country)\n        newColors.push({id:country,color:ourColor})\n      }\n    }) \n    setSelected([...selected,...newSelections])\n    set MapColor([...mapColor,...newColors])\n    */\n  };\n\n  const selectSortedMany = ids => {\n    //let ourColor = getNewColor()\n    //let newColors = ids.map(c => { return { id: c, color: ourColor } })\n    setSelected(ids);\n    //setMapColor([...mapColor.filter(c => !ids.includes(c.id)), ...newColors])\n  };\n\n  const clickOne = clickedId => {\n    if (selected.includes(clickedId)) {\n      if (showDetail === clickedId) {\n        setShowDetail(null);\n        //console.log(\"showDetail:\", showDetail)\n      }\n\n      setSelected(selected.filter(c => c !== clickedId));\n      setMapColor(mapColor.filter(c => c.id !== clickedId));\n    } else {\n      setSelected([...selected, clickedId]);\n      setMapColor([...mapColor, {\n        id: clickedId,\n        color: getNewColor()\n      }]);\n      //console.log(\"showing detail for \",clickedId)\n      setShowDetail(clickedId);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: background\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: {\n        border: \"2px solid cyan\",\n        borderRadius: \"5px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        hidden: loggingIn,\n        children: /*#__PURE__*/_jsxDEV(LoginForm, {\n          user: user,\n          setUser: setUser,\n          setBlocs: setBlocs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 32\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          align: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Filter, {\n          countries: countries,\n          showDetail: showDetail,\n          setShowDetail: setShowDetail,\n          selected: selected,\n          setSelected: setSelected,\n          dkd: deselectKeepDetails\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(CountriesDropdown, {\n          countries: countries,\n          setShowDetail: setShowDetail,\n          blocs: blocs,\n          selectOne: selectOne,\n          selectMany: selectMany,\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          hidden: true,\n          variant: \"warning\",\n          onClick: () => setLoggingIn(!loggingIn),\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n            variant: \"info\",\n            id: \"dropdown-basic\",\n            children: \"Theme\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n            children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              onClick: () => setBackground(getNewColor),\n              children: \"Random\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              onClick: () => setBackground(\"white\"),\n              children: \"White\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              onClick: () => setBackground(\"yellow\"),\n              children: \"Yellow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CountryDetails, {\n        countries: countries,\n        religions: religions /*currencies={currencies}*/,\n        showDetail: showDetail,\n        mapColor: mapColor,\n        selected: selected,\n        selectOne: selectOne,\n        dkd: deselectKeepDetails\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Map3, {\n        mapColor: mapColor,\n        clickOne: clickOne\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mapButtonGroup\",\n        children: /*#__PURE__*/_jsxDEV(IconContext.Provider, {\n          value: {\n            size: \"1.25em\",\n            className: \"saveButtonIcon\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"warning\",\n            onClick: () => {\n              setShowDetail(null);\n              setSelected([]);\n              setMapColor([]);\n            },\n            children: [/*#__PURE__*/_jsxDEV(MdLayersClear, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 111\n            }, this), \"Clear map\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(SaveBloc, {\n            selected: selected,\n            user: user,\n            updateBlocList: updateBlocList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(SelectedFlags, {\n        countries: countries,\n        selected: selected,\n        mapColor: mapColor,\n        setShowDetail: setShowDetail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 11\n  }, this);\n}\n_s(App, \"GZ+44AvjuTgzzC6zBK88IY3pWt0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Button","MdLayersClear","IconContext","Dropdown","Map3","CountriesDropdown","CountryDetails","Filter","countriesService","relService","currencyService","getBlocsService","LoginForm","SelectedFlags","SaveBloc","Footer","getNewColor","R","Math","round","random","toString","padStart","G","B","App","loggingIn","setLoggingIn","selected","setSelected","mapColor","setMapColor","countries","setCountries","showDetail","setShowDetail","user","setUser","blocs","setBlocs","religions","setReligions","background","setBackground","fetchCountries","then","res","fetchReligions","updateBlocList","fetchBlocs","token","selectOne","id","includes","filter","c","color","deselectOne","deselectKeepDetails","selectMany","ids","ourColor","newColors","map","s","selectSortedMany","clickOne","clickedId","border","borderRadius","display","alignItems","align","size","className"],"sources":["/home/pal/code/herokuMaat/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport { MdLayersClear } from 'react-icons/md'\nimport { IconContext } from 'react-icons'\nimport { Dropdown } from 'react-bootstrap';\nimport Map3 from './components/Map3'\nimport CountriesDropdown from './components/Dropdown'\nimport CountryDetails from './components/CountryDetails'\nimport Filter from './components/Filter'\nimport { countriesService } from './services/countriesService'\nimport { relService } from './services/relService'\nimport { currencyService } from './services/currencyService'\nimport { getBlocsService } from './services/blocService'\nimport LoginForm from './components/LoginForm'\nimport SelectedFlags from './components/SelectedFlags'\nimport SaveBloc from './components/SaveBloc'\nimport Footer from './components/Footer'\n\nimport './styles/MapBottomButtons.css'\nimport './styles/SaveBloc.css'\n\n\nconst getNewColor = () => {\n  const R = Math.round(Math.random() * 255).toString(16).padStart(2, '0')\n  const G = Math.round(Math.random() * 255).toString(16).padStart(2, '0')\n  const B = Math.round(Math.random() * 255).toString(16).padStart(2, '0')\n  return `#${R}${G}${B}`\n}\n\nfunction App() {\n  const [loggingIn, setLoggingIn] = useState(true)\n  const [selected, setSelected] = useState([])\n  const [mapColor, setMapColor] = useState([])\n  const [countries, setCountries] = useState([])\n  const [showDetail, setShowDetail] = useState(null)\n  const [user, setUser] = useState(null)\n  const [blocs, setBlocs] = useState([])\n  const [religions, setReligions] = useState([])\n  const [background,setBackground] = useState(\"yellow\")\n // const [currencies, setCurrencies] = useState([])\n\n\n  useEffect(() => {\n    const fetchCountries = async () => {\n      await countriesService().then(res => {\n        setCountries(res)\n        //console.log(\"countries in fetching app\",countries)\n      })\n    }\n    fetchCountries()\n  }, [])\n\n  useEffect(() => {\n    const fetchReligions = async () => {\n      await relService().then(res => {\n        setReligions(res)\n        // console.log(\"REL IN FETCH \",religions)\n      })\n    }\n    fetchReligions()\n  }, [])\n\n  /*\n    useEffect(() => {\n    const fetchCurrency = async () => {\n      await currencyService().then(res => {\n        setCurrencies(res)\n        // console.log(\"REL IN FETCH \",religions)\n      })\n    }\n    fetchCurrency()\n  }, [])\n*/\n  const updateBlocList = () => {\n    if(user){\n      const fetchBlocs = async () => {\n        await getBlocsService(`bearer ${user.token}`).then(res => {\n          //console.log(\"got blocs: \",res)\n          setBlocs(res)\n        })\n      }\n      fetchBlocs()\n    }\n  }\n\n  const selectOne = (id) => {\n    //console.log(\"selectOne called for \",id)\n    if (selected.includes(id)) {\n      //give it a new color\n      setMapColor([...mapColor.filter(c => c.id !== id), { id: id, color: getNewColor() }])\n    } else {\n      setSelected([...selected, id])\n      setMapColor([...mapColor, { id: id, color: getNewColor() }])\n    }\n    setShowDetail(id)\n  }\n\n  const deselectOne = (id) => {\n    if (showDetail === id) {\n      setShowDetail(null)\n    }\n    setSelected(selected.filter(c => c !== id))\n    setMapColor(mapColor.filter(c => c.id !== id))\n  }\n\n  const deselectKeepDetails = (id) => {\n    setSelected(selected.filter(c => c !== id))\n    setMapColor(mapColor.filter(c => c.id !== id))\n  }\n\n  const selectMany = (ids) => {\n    let ourColor = getNewColor()\n    let newColors = ids.map(c => { return { id: c, color: ourColor } })\n    setSelected([...selected.filter(s => !ids.includes(s)), ...ids])\n    setMapColor([...mapColor.filter(c => !ids.includes(c.id)), ...newColors])\n    /* old implementation that preserves existing colors\n    let newColors = []\n    let newSelections = []\n    ids.forEach(country=>{\n      if(!selected.includes(country)){\n        newSelections.push(country)\n        newColors.push({id:country,color:ourColor})\n      }\n    }) \n    setSelected([...selected,...newSelections])\n    set MapColor([...mapColor,...newColors])\n    */\n  }\n  const selectSortedMany = (ids) => {\n    //let ourColor = getNewColor()\n    //let newColors = ids.map(c => { return { id: c, color: ourColor } })\n    setSelected(ids)\n    //setMapColor([...mapColor.filter(c => !ids.includes(c.id)), ...newColors])\n  \n  }\n\n  const clickOne = (clickedId) => {\n    if (selected.includes(clickedId)) {\n      if (showDetail === clickedId) {\n        setShowDetail(null)\n        //console.log(\"showDetail:\", showDetail)\n      }\n      setSelected(selected.filter(c => c !== clickedId))\n      setMapColor(mapColor.filter(c => c.id !== clickedId))\n\n    } else {\n      setSelected([...selected, clickedId])\n      setMapColor([...mapColor, { id: clickedId, color: getNewColor() }])\n      //console.log(\"showing detail for \",clickedId)\n      setShowDetail(clickedId)\n    }\n  }\n\n  return (<div style={{background: background}}>\n    <div className=\"container\" style={{ border: \"2px solid cyan\", borderRadius: \"5px\" }}>\n      {<div hidden={loggingIn}><LoginForm user={user}  setUser={setUser} setBlocs={setBlocs} /></div>}\n      <div style={{display: 'flex',\n  alignItems: 'center',\n\talign: 'center'}}>\n<Filter countries={countries} showDetail={showDetail} setShowDetail={setShowDetail} selected={selected} setSelected={setSelected} dkd={deselectKeepDetails} />\n      <CountriesDropdown countries={countries} setShowDetail={setShowDetail} blocs={blocs} selectOne={selectOne} selectMany={selectMany} user={user}/>\n<Button hidden variant=\"warning\" onClick={() =>setLoggingIn(!loggingIn)}>Login</Button>\n<Dropdown>\n  <Dropdown.Toggle variant=\"info\" id=\"dropdown-basic\">\n    Theme\n  </Dropdown.Toggle>\n\n  <Dropdown.Menu>\n    <Dropdown.Item onClick={()=>setBackground(getNewColor)}>Random</Dropdown.Item>\n    <Dropdown.Item onClick={()=>setBackground(\"white\")}>White</Dropdown.Item>\n    <Dropdown.Item onClick={()=>setBackground(\"yellow\")}>Yellow</Dropdown.Item>\n  </Dropdown.Menu>\n</Dropdown>\n</div>\n\n\n\n      <CountryDetails countries={countries} religions={religions} /*currencies={currencies}*/ showDetail={showDetail} mapColor={mapColor} selected={selected} selectOne={selectOne} dkd={deselectKeepDetails} />\n      <Map3 mapColor={mapColor} clickOne={clickOne} />\n      <div className=\"mapButtonGroup\">\n        <IconContext.Provider value={{ size: \"1.25em\", className: \"saveButtonIcon\" }}>\n          <Button variant=\"warning\" onClick={() => { setShowDetail(null); setSelected([]); setMapColor([]) }}><MdLayersClear/>Clear map</Button>\n          <SaveBloc selected={selected} user={user} updateBlocList={updateBlocList} />\n        </IconContext.Provider>\n      </div>\n      <SelectedFlags  countries={countries} selected={selected} mapColor={mapColor} setShowDetail={setShowDetail} />\n      <Footer />\n    </div>\n  </div>)\n}\n\nexport default App\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}